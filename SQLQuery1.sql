/* 1. Which customer made the highest purchase in terms of total price? */

SELECT 
c.first_name,
c.last_name, 
SUM(p.TotalPrice) AS TotalPurchase
FROM 
sales.customers c
INNER JOIN 
Purchase p 
ON c.customer_id = p.CustomerID
GROUP BY 
c.first_name,
c.last_name
ORDER BY 
TotalPurchase DESC
OFFSET 0 ROWS FETCH FIRST 5 ROWS ONLY


/* 2. Which bike model was sold the most? */

SELECT 
b.Model,
SUM(p.Quantity) AS TotalSold
FROM 
Bike b
INNER JOIN 
Purchase p 
ON b.BikeID = p.BikeID
GROUP BY 
b.Model
ORDER BY 
TotalSold DESC
OFFSET 0 ROWS FETCH FIRST 5 ROWS ONLY


/* 3. Products and their yearly stocks in the store. */

SELECT p.product_name, b.brand_name, p.model_year, p.list_price, s.quantity
FROM production.products p
JOIN
production.stocks s
ON p.product_id = s.product_id
JOIN 
production.brands b
ON b.brand_id = p.brand_id


/* 4. Display information of the employees working at the bike stores. */

SELECT s.first_name, s.last_name,s.email, s.phone,st.store_name
FROM sales.staffs s
JOIN
sales.stores st
ON s.store_id = st.store_id


/* 5. What is the total number of bikes sold for each type? */

SELECT
b.type, 
COUNT(p.PurchaseID) AS TotalSold
FROM
Bike b
LEFT JOIN
Purchase p ON b.BikeID = p.BikeID
GROUP BY
b.type
ORDER BY 
TotalSold DESC


/* 6. Get a list of all customers who have placed orders both in the year 2017 and in the year 2018. */

SELECT o.customer_id, 	
concat(first_name,' ',last_name) as Customer_Name
FROM sales.orders o
JOIN sales.customers c on o.customer_id = c.customer_id
WHERE year(order_date) = 2017
intersect
SELECT o2.customer_id,concat(c2.first_name,' ',c2.last_name)
FROM sales.orders o2
JOIN sales.customers c2 on o2.customer_id = c2.customer_id
WHERE year(order_date) = 2018


/* 7. Get the number of orders placed by each customer, broken down by purchase level. */

SELECT o.customer_id, c.first_name, c.last_name, SUM(oi.list_price) as purchase_price,
    CASE 
        WHEN SUM(oi.list_price) > 1500 THEN 'High'
        WHEN SUM(oi.list_price) BETWEEN 1000 AND 1500 THEN 'Medium'
        ELSE 'Low'
    END AS purchase_level
FROM sales.orders o
JOIN sales.order_items oi
ON o.order_id = oi.order_id
JOIN sales.customers c
ON c.customer_id = o.customer_id
GROUP BY o.customer_id, c.first_name, c.last_name
ORDER BY o.customer_id


/* 8. What is the total revenue generated by each customer? */

SELECT 
c.first_name, 
c.last_name, 
SUM(p.TotalPrice) AS TotalRevenue
FROM sales.customers c
INNER JOIN Purchase p ON c.customer_id = p.CustomerID
GROUP BY c.first_name, c.last_name
ORDER BY TotalRevenue DESC


/* 9. Rank the products based on their price and retrive category, brand of the product. */

SELECT 
c.category_name,
b.brand_name,
p.product_name, 
p.list_price,
 ROW_NUMBER() OVER (ORDER BY list_price DESC) AS rank
FROM 
production.products p
JOIN production.categories c
ON c.category_id = p.category_id
JOIN production.brands b
ON b.brand_id = p.brand_id
ORDER BY 
list_price DESC;


/* 10. Get the total sales and orders for each month.  */

SELECT 
DATENAME(MONTH,o.order_date) AS month, 
SUM(oi.list_price) as monthly_sales, 
COUNT(oi.order_id) as monthly_orders
FROM sales.orders o
JOIN sales.order_items oi
ON o.order_id = oi.order_id
GROUP BY DATENAME(MONTH,o.order_date)
ORDER BY MIN(o.order_date)

